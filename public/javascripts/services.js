// Generated by CoffeeScript 1.3.3
(function() {
  "use strict";

  var services;

  services = angular.module("jstracker.services", ["ngResource"]);

  services.factory("Host", [
    "$resource", function($resource) {
      return $resource("/hosts/:id?type_id=:type&browser=:browser", {
        id: "@id",
        type: "@type",
        browser: "@browser"
      });
    }
  ]);

  services.factory("MultiHostLoader", [
    "Host", "$q", function(Host, $q) {
      return function() {
        var delay;
        delay = $q.defer();
        return Host.query(function(hosts) {
          return delay.resolve(hosts);
        }, function() {
          return delay.reject("Unable to fetch hosts");
        });
      };
    }
  ]);

  services.factory("HostLoader", [
    "Host", "$route", "$q", function(Host, $route, $q) {
      return function() {
        var delay;
        delay = $q.defer();
        return Host.get({
          id: $route.current.params.hostId,
          type: $route.current.params.type,
          browser: $route.current.params.browser
        }, function(host) {
          var k, msgs, v;
          msgs = (function() {
            var _ref, _results;
            _ref = host.msgs;
            _results = [];
            for (k in _ref) {
              v = _ref[k];
              v.id = k;
              _results.push(v);
            }
            return _results;
          })();
          msgs.sort(function(a, b) {
            return b.count - a.count;
          });
          host.msgs = msgs;
          return delay.resolve(host);
        }, function() {
          return delay.reject("Unable to fetch host with id " + host.id);
        });
      };
    }
  ]);

  services.factory("Msg", [
    "$resource", function($resource) {
      return $resource("/msgs/:id", {
        id: "@id"
      });
    }
  ]);

  services.factory("MsgLoader", [
    "Msg", "$route", "$q", function(Msg, $route, $q) {
      return function() {
        var delay;
        delay = $q.defer();
        return Msg.get({
          id: $route.current.params.msgId
        }, function(msg) {
          return delay.resolve(msg);
        }, function() {
          return delay.reject("Unable to fetch msg with id " + msg.id);
        });
      };
    }
  ]);

}).call(this);
